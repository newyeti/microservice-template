x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

version: '3.9'

services:
  keycloak-mysql:
    container_name: keyclock-mysql
    image: mysql:5.7.41-debian
    volumes:
      - ./data/mysql-keyclock:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root 
      - MYSQL_DATABASE=keyclock
      - MYSQL_USER=keyclock
      - MYSQL_PASSWORD=password
    restart: always
    networks:
      - infra-network
  
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: ["start-dev", "--import-realm"]
    environment:
      - DB_VENDOR=MYSQL 
      - DB_ADDR=mysql
      - DB_DATABASE=keyclock
      - DB_USER=keyclock
      - DB_PASSWORD=password
      - KEYCLOAK_ADMIN=admin 
      - KEYCLOAK_ADMIN_PASSWORD=admin 
    ports:
      - 8080:8080
    volumes:
      - ./realms:/opt/keycloak/data/import
    depends_on:
      - keycloak-mysql
    networks:
      - infra-network

  # Cloud

  discovery-server:
    container_name: newyeti-discovery-server
    image: sachindramaharjan/newyeti-discovery-server:latest
    pull_policy: always
    ports:
      - 8761:8761
    networks:
      - infra-network
  
  config-server:
    container_name: newyeti-config-server
    image: sachindramaharjan/newyeti-config-server:latest
    pull_policy: always
    ports:
      - 9091:9091
    depends_on:
      - discovery-server
    networks:
      - infra-network
    environment:
      - CONFIG_SERVER_GIT_URI=https://github.com/newyeti/configuration.git
      - EUREKA_SERVICE_URL=http://eureka:password@newyeti-discovery-server:8761/eureka

  api-gateway:
    container_name: newyeti-api-gateway
    image: sachindramaharjan/newyeti-api-gateway:latest
    ports:
      - 8181:8080
    expose:
      - 8181
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - CONFIG_SERVER_URI=http://config-server
      - CONFIG_SERVER_PORT=9091
      - CONFIG_SERVER_TIMEOUT=300
      - DISCOVERY_SERVER_HOSTNAME=${DISCOVERY_SERVER_HOSTNAME}
    pull_policy: always
    networks:
      - infra-network
      - monitoring-network
    depends_on:
      - discovery-server
      - config-server
      - keycloak
  
  # Observability

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.7
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - monitoring-network
    depends_on:
      - loki
    logging: *default-logging

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network

  collector:
    image: otel/opentelemetry-collector:latest
    container_name: collector
    networks:
      - monitoring-network
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "5555:5555"
      - "6666:6666"
    depends_on:
      - tempo
      - prometheus
  
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml",  "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo"]
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318"  # otlp http
    volumes:
      - ./grafana/tempo/tempo-config.yaml:/etc/tempo.yaml
      - ./grafana/tempo/tempo-overrides.yaml:/etc/overrides.yaml
      - ./tempo-data:/tmp/tempo
    networks:
      - monitoring-network
      - infra-network
    logging: *default-logging

  grafana:
    image: grafana/grafana
    user: "472"
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana/
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - loki
      - collector
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_AUTH_ANONYMOUS_ENABLED="true"
      - GF_AUTH_ANONYMOUS_ORG_ROLE="Admin"
      - GF_AUTH_DISABLE_LOGIN_FORM="true"
    logging: *default-logging

  ## Applications

  template-application:
    container_name: template-application 
    image: sachindramaharjan/newyeti-template-application:latest
    pull_policy: always
    restart: always
    ports:
      - "4000:4000"
    networks:
      - infra-network
      - monitoring-network
    depends_on:
      - config-server
      - api-gateway
      - collector
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - CONFIG_SERVER_URI=http://config-server
      - CONFIG_SERVER_PORT=9091
      - CONFIG_SERVER_TIMEOUT=300
      - DISCOVERY_SERVER_HOSTNAME=${DISCOVERY_SERVER_HOSTNAME}
      - SPRING_PROFILES_ACTIVE=docker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=template-application,compose_service=template-application
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - MANAGEMENT_METRICS_TAGS_APPLICATION=template-application
      - SPRING_APPLICATION_JSON={"logging.level.org.springframework.cloud.gateway":"ERROR","logging.level.org.springframework.boot.autoconfigure.web":"ERROR", "logging.level.web":"ERROR"}
    logging: *default-logging

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  infra-network:
    driver: bridge
  monitoring-network:
    driver: bridge
